//
// Test Bench Module ENCDEC_lib.Register_selctor_tb.Register_selctor_tester
//
// Created:
//          by - benmaorr.refael,kapelnik.Tal (L330W509)
//          at - 12:05:42 11/18/2021
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
//
`resetall
`timescale 1ns/10ps

module Register_selctor_tb;

// Local declarations
parameter DATA_WIDTH = 32;
parameter AMBA_ADDR_WIDTH = 32;
parameter AMBA_WORD = 32;

// Internal signal declarations
logic                         clk = 1'b0;
logic                         rst = 1'b0;
reg [AMBA_ADDR_WIDTH - 1:0] PADDR;
reg [AMBA_WORD - 1:0]       PWDATA;
reg                         PENABLE;
reg                         PSEL;
logic                       PWRITE= 1'b0;
reg [AMBA_WORD - 1:0]       PRDATA;
reg [AMBA_WORD - 1:0]       CTRL;
reg [AMBA_WORD - 1:0]       DATA_IN;
reg [AMBA_WORD - 1:0]       CODEWORD_WIDTH;
reg [AMBA_WORD - 1:0]       NOISE;


Register_selctor #(32,32,32) U_0(
   .clk            (clk),
   .rst            (rst),
   .PADDR          (PADDR),
   .PWDATA         (PWDATA),
   .PENABLE        (PENABLE),
   .PSEL           (PSEL),
   .PWRITE         (PWRITE),
   .PRDATA         (PRDATA),
   .CTRL           (CTRL),
   .DATA_IN        (DATA_IN),
   .CODEWORD_WIDTH (CODEWORD_WIDTH),
   .NOISE          (NOISE)
);

//clock always block:
always
#1 clk <=~clk;

initial begin
#10.2ns;  //asyncrounsly de-assert asrtn
rst <= 1'b0;
#10;
@(posedge clk) rst <= 1'b1;

repeat(10)@(posedge clk);

// WRITE TO REGISTERS TEST

PWDATA <= {AMBA_WORD{1'b1}}; // 11111111
PADDR <= {{AMBA_ADDR_WIDTH-4{1'b0}},{4'b0100}}; // DATA
PSEL <= 1'b1;
PWRITE <= 1'b1;

#2;
PENABLE <= 1'b1;
#2;
PSEL <= 1'b0;
PENABLE <= 1'b0;

repeat(5)@(posedge clk);

PWDATA <= {{AMBA_WORD-1{1'b1}},{1'b0}};  //// 11111___ 10
PADDR <= {{AMBA_ADDR_WIDTH-4{1'b0}},{4'b1000}}; // DATA
PSEL <= 1'b1;

#2;
PENABLE <= 1'b1;
#2;
PSEL <= 1'b0;
PENABLE <= 1'b0;

repeat(5)@(posedge clk);

PWDATA <= {{AMBA_WORD-2{1'b1}},{2'b00}}; // 11111__1100
PADDR <= {{AMBA_ADDR_WIDTH-4{1'b0}},{4'b1100}}; // DATA
PSEL <= 1'b1;

#2;
PENABLE <= 1'b1;
#2;
PSEL <= 1'b0;
PENABLE <= 1'b0;

repeat(5)@(posedge clk);

PWDATA <= {{AMBA_WORD-3{1'b1}},{3'b000}}; // 11111__11000
PADDR <= {{AMBA_ADDR_WIDTH-4{1'b0}},{4'b0000}}; // DATA
PSEL <= 1'b1;

#2;
PENABLE <= 1'b1;
#2;
PSEL <= 1'b0;
PENABLE <= 1'b0;

// READ FROM REGISTERS TEST
PWRITE <= 1'b0;

//CTRL
repeat(10)@(posedge clk);

PADDR <= {{AMBA_ADDR_WIDTH-4{1'b0}},{4'b0000}}; // DATA
PSEL <= 1'b1;

#2;
PENABLE <= 1'b1;
#2;
PSEL <= 1'b0;
PENABLE <= 1'b0;

//DATA_IN
repeat(10)@(posedge clk);

PADDR <= {{AMBA_ADDR_WIDTH-4{1'b0}},{4'b0100}}; // DATA
PSEL <= 1'b1;

#2;
PENABLE <= 1'b1;
#2;
PSEL <= 1'b0;
PENABLE <= 1'b0;

//WIDTH
repeat(10)@(posedge clk);

PADDR <= {{AMBA_ADDR_WIDTH-4{1'b0}},{4'b1000}}; // DATA
PSEL <= 1'b1;

#2;
PENABLE <= 1'b1;
#2;
PSEL <= 1'b0;
PENABLE <= 1'b0;

//NOISE
repeat(10)@(posedge clk);

PADDR <= {{AMBA_ADDR_WIDTH-4{1'b0}},{4'b1100}}; // DATA
PSEL <= 1'b1;

#2;
PENABLE <= 1'b1;
#2;
PSEL <= 1'b0;
PENABLE <= 1'b0;




#100
$finish(0);
end

endmodule
